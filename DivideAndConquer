Binary search is a technique for very rapidly searching a sorted collection by cutting the search space in half at every pass.
Given a sorted array, such as this:
[1, 3, 16, 22, 31, 33, 34]
You can search for the value 31, as follows:
1) Pick the midpoint: 22.
2) The value is higher than 22, so now consider only the right half of the previous array:
[...31, 33, 34]
3) Pick the midpoint: 33
4) The value is lower than 33, so now consider only the left half of the previous array:
[...31...]
5) Pick the midpoint: 31
6) You've hit the value.
7) Return the index of the value.

function indexOfNum(array, n) {
    let x = (array.length + 1) / 2;
    if (n === array[0]) {
        return 0;
    }
    if (n === array.at(-1)) {
        return array.length - 1;
    }
    if (n === array[x]) {
        return x;
    }
    if (n > array[x]) {
        for (let i = x + 1; i < array.length; i++) {
            let y = Math.floor((array.length - x) / 2) + x; 
            if (n === array[y]) {
                return y;
            } 
            if (n > array[y]) {
                return y + 1;
            } else {
                return y - 1;
            }
        }
    } else {
        for (let i = 0; i < x; i++) {
            let z = Math.floor((array.length - x) / 2) - x; 
            if (n === array[z]) {
                return z;
            } 
            if (n > array[z]) {
                return z + 1;
            } else {
                return z - 1;
            }
        }

    }
}
